name: publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Detect package version
        id: version
        shell: bash
        run: |
          python - <<'PY'
          import os
          import subprocess
          from pathlib import Path

          try:
            import tomllib
          except ModuleNotFoundError:
            import tomli as tomllib

          def load_version(content: str) -> str:
            data = tomllib.loads(content)
            return data["package"]["version"]

          current_content = Path("Cargo.toml").read_text(encoding="utf-8")
          current_version = load_version(current_content)

          try:
            prev_content = subprocess.check_output(["git", "show", "HEAD^:Cargo.toml"], text=True)
            previous_version = load_version(prev_content)
          except subprocess.CalledProcessError:
            previous_version = ""

          version_changed = current_version != previous_version

          print(f"Current version: {current_version}")
          print(f"Previous version: {previous_version or 'N/A'}")
          print(f"Version changed: {version_changed}")

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
            fh.write(f"current_version={current_version}\n")
            fh.write(f"previous_version={previous_version}\n")
            fh.write(f"version_changed={'true' if version_changed else 'false'}\n")
          PY

      - name: Create or update tag
        shell: bash
        run: |
          TAG="v${{ steps.version.outputs.current_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f "$TAG"
          git push origin --force "$TAG"

      - name: Build release notes
        id: changelog
        shell: bash
        run: |
          export VERSION='${{ steps.version.outputs.current_version }}'
          if [ ! -f CHANGELOG.md ]; then
            echo "::error::CHANGELOG.md not found" >&2
            exit 1
          fi

          python - <<'PY'
          import os
          import re
          import sys
          from pathlib import Path

          version = os.environ["VERSION"]
          path = Path("CHANGELOG.md")
          text = path.read_text(encoding="utf-8")

          pattern = re.compile(rf"^##\s+\[?{re.escape(version)}\]?[^\n]*", re.MULTILINE)
          match = pattern.search(text)

          if not match:
            print(f"::error::No changelog entry found for version {version}", file=sys.stderr)
            sys.exit(1)

          start = match.end()
          rest = text[start:]
          next_match = re.search(r"^##\s+", rest, re.MULTILINE)
          section = rest[:next_match.start()] if next_match else rest

          entry = (match.group(0) + "\n" + section.strip()).strip()

          lines = entry.splitlines()
          body = "\n".join(lines[1:]).lstrip()

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
            fh.write("notes<<EOF\n")
            fh.write(body)
            fh.write("\nEOF\n")
          PY

      - name: Verify the publish process
        run: make publish-dry-run

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: make publish

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.current_version }}
          name: v${{ steps.version.outputs.current_version }}
          body: ${{ steps.changelog.outputs.notes }}
          overwrite: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
